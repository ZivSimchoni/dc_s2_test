name: CI Pipeline

on: [push]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  
jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt || true
          pip install -r requirements-cicd.txt

      - name: Run black
        run: black --check .

      - name: Run bandit and count issues
        continue-on-error: true
        run: |
          bandit -r . -f json -o bandit-output.json
          count=$(jq '.results | length' bandit-output.json)
          echo "Bandit found $count issue(s)"
          echo "## 🔍 Bandit Results" >> $GITHUB_STEP_SUMMARY
          echo "Found $count security issue(s)" >> $GITHUB_STEP_SUMMARY
          if [ "$count" -gt 0 ]; then
            exit 1 # ⛔ This will stop the workflow if issues are found
          fi

      - name: Run pip-audit on project dependencies (continue on failure)
        continue-on-error: true
        run: |
          pip-audit -r requirements.txt -f json -o pip-audit-output.json
          count=$(jq '. | length' pip-audit-output.json)
          echo "pip-audit found $count vulnerability(ies)"
          echo "## 🐍 pip-audit Results" >> $GITHUB_STEP_SUMMARY
          echo "Found $count vulnerability(ies)" >> $GITHUB_STEP_SUMMARY

          if [ "$count" -gt 0 ]; then
            echo "::warning::pip-audit found $count vulnerability(ies)!"
          fi

      - name: Run test script
        run: |
         chmod +x ./test.sh
         ./test.sh

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=sha,format=short
          type=ref,event=branch
          latest

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'